% Данные из таблицы
engines = [180, 67, 850;  % Вариант 1
           176, 70, 1000; % Вариант 2
           176, 68, 860;  % Вариант 3
           181, 67, 820;  % Вариант 4
           177, 68, 860;  % Вариант 5
           180, 66, 800]; % Вариант 6

% Оптимизация: Максимум для мощности и крутящего момента, минимум для массы
criteria = [1, 1, -1]; % 1 - максимизация, -1 - минимизация

% Нормализация данных
normalized_data = engines;
for j = 1:size(engines, 2)
    if criteria(j) == 1
        % Для максимизируемых критериев: нормализация по максимуму
        normalized_data(:, j) = engines(:, j) / max(engines(:, j));
    else
        % Для минимизируемых критериев: нормализация по минимуму
        normalized_data(:, j) = min(engines(:, j)) ./ engines(:, j);
    end
end

% Веса критериев (можно задать свои, если известны приоритеты)
weights = [0.4, 0.4, 0.2]; % Сумма весов должна быть равна 1

% Расчет итоговых значений
scores = normalized_data * weights';

% Определение оптимального варианта
[best_score, best_variant] = max(scores);

% Вывод результатов
disp('Нормализованные данные:');
disp(array2table(normalized_data, ...
    'VariableNames', {'Мощность', 'Крутящий_момент', 'Масса'}));
disp('Итоговые оценки вариантов:');
disp(scores);
disp(['Оптимальный вариант двигателя: Вариант ', num2str(best_variant)]);
disp(['С максимальной оценкой: ', num2str(best_score)]);

% Построение графика оценок
figure;
bar(scores);
title('Итоговые оценки двигателей');
xlabel('Вариант двигателя');
ylabel('Оценка');
grid on;
